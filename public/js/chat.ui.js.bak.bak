/* js/chat.ui.js
   Minimal, dependency-light (vanilla + small jQuery compatibility),
   compatible with existing chat_ajax.php endpoints.
   Replace your existing js/chat.ui.js with this file.
*/
(() => {
  // Elements
  const sessionsDiv = document.getElementById('sessions');
  const messagesDiv = document.getElementById('messages');
  const newChatBtn = document.getElementById('new-chat-btn');
  const sendBtn = document.getElementById('send-btn');
  const userInput = document.getElementById('user-input');
  const chatHeader = document.getElementById('chat-header');
  const toggleBtn = document.getElementById('toggle-chat-list');
  const chatList = document.getElementById('chat-list');

  let currentSessionId = null;
  let currentController = null; // AbortController for running request
  let loadingElem = null;

  // Utilities
  const htmlEscape = s => {
    const d = document.createElement('div');
    d.textContent = s;
    return d.innerHTML;
  };

  function createEl(tag, attrs = {}, children = []) {
    const el = document.createElement(tag);
    Object.entries(attrs).forEach(([k,v])=>{
      if(k === 'class') el.className = v;
      else if(k === 'text') el.textContent = v;
      else el.setAttribute(k, v);
    });
    children.forEach(c => el.appendChild(c));
    return el;
  }

  // Session list
  async function loadSessions() {
    try {
      const fd = new URLSearchParams();
      fd.set('list_chats', '1');

      const resp = await fetch('chat_ajax.php', {
        method: 'POST',
        body: fd
      });
      const data = await resp.json();
      sessionsDiv.innerHTML = '';
      if (!data.sessions) return;
      data.sessions.forEach(s => {
        const item = createEl('div', {class: 'session-item'});
        const title = createEl('div', {class:'session-title', text: (s.title || '(untitled)')});
        item.appendChild(title);

        const controls = createEl('div', {class:'session-controls'});
        const copyBtn = createEl('button', {class:'icon-btn', title:'Fork chat'});
        copyBtn.innerHTML = '⎘';
        copyBtn.onclick = e => {
          e.stopPropagation();
          fetch('chat_ajax.php', {
            method:'POST',
            body:new URLSearchParams({'copy_chat': s.id})
          }).then(r=>r.json()).then(d=>{
            if(d.chat_session_id){ loadSessions(); loadChat(d.chat_session_id); }
          });
        };

        const delBtn = createEl('button', {class:'icon-btn', title:'Delete chat'});
        delBtn.innerHTML = '🗑️';
        delBtn.onclick = e => {
          e.stopPropagation();
          if (!confirm('Delete this chat?')) return;
          fetch('chat_ajax.php', {
            method:'POST',
            body:new URLSearchParams({'delete_chat': s.id})
          }).then(r=>r.json()).then(d=>{
            if(d.success){
              if (currentSessionId === s.id){
                currentSessionId = null;
                messagesDiv.innerHTML = '';
                chatHeader.textContent = 'Select a chat';
              }
              loadSessions();
            } else {
              alert('Delete failed: ' + (d.error || 'unknown'));
            }
          });
        };

        controls.appendChild(copyBtn);
        controls.appendChild(delBtn);
        item.appendChild(controls);

        item.onclick = () => loadChat(s.id, s.title || '(untitled)');
        sessionsDiv.appendChild(item);
      });
    } catch (err) {
      console.error('loadSessions error', err);
    }
  }

  // Load chat messages
  async function loadChat(sessionId, title = null) {
    try {
      const resp = await fetch('chat_ajax.php', {
        method: 'POST',
        body: new URLSearchParams({ load_chat: sessionId })
      });
      const data = await resp.json();
      currentSessionId = sessionId;
      chatHeader.textContent = title || `Chat: ${sessionId}`;
      messagesDiv.innerHTML = '';
      if (data.history) {
        data.history.forEach(entry => {
          appendMessage(entry.content, entry.role === 'user' ? 'user' : 'assistant', entry.id);
        });
        scrollToBottom();
      }
      loadSessions();
      // ensure focus for quick typing
      userInput.focus();
    } catch (err) {
      console.error('loadChat error', err);
    }
  }

  // Append message
  function appendMessage(text, role='assistant', id=null){
    // container
    const el = document.createElement('div');
    el.className = 'message ' + (role === 'user' ? 'user' : 'assistant');
    // content
    const p = document.createElement('div');
    p.innerText = text;
    el.appendChild(p);
    // optional delete for persisted messages
    if (id) {
      const del = document.createElement('span');
      del.className = 'msg-delete';
      del.title = 'Delete message';
      del.innerText = '🗑️';
      del.onclick = (e) => {
        e.stopPropagation();
        if (!confirm('Delete this message?')) return;
        fetch('chat_ajax.php', {
          method:'POST',
          body: new URLSearchParams({
            delete_message: id,
            chat_session_id: currentSessionId
          })
        })
        .then(r => r.json())
        .then(d => {
          if (d.success) el.remove();
          else alert('Delete failed: ' + (d.error || 'unknown'));
        });
      };
      el.appendChild(del);
    }
    messagesDiv.appendChild(el);
    scrollToBottom();
  }

  // Scrolling
  function scrollToBottom(){
    requestAnimationFrame(()=>{ messagesDiv.scrollTop = messagesDiv.scrollHeight; });
  }

  // Loading indicator with cancel button
  function showLoadingIndicator(){
    // remove existing first
    hideLoadingIndicator();
    loadingElem = createEl('div',{class:'message assistant loading-indicator'});
    const dot = createEl('div',{class:'loader-dot'});
    const txt = createEl('div',{text:'Thinking...'});
    const controls = createEl('div',{class:'loading-controls'});
    const stopBtn = createEl('button',{class:'icon-btn'});
    stopBtn.innerText = '⏹ Stop';
    stopBtn.onclick = () => {
      if (currentController) {
        currentController.abort();
      }
    };
    controls.appendChild(stopBtn);
    loadingElem.appendChild(dot);
    loadingElem.appendChild(txt);
    loadingElem.appendChild(controls);
    messagesDiv.appendChild(loadingElem);
    scrollToBottom();
  }
  function hideLoadingIndicator(){
    if (loadingElem){
      loadingElem.remove();
      loadingElem = null;
    }
  }

  // Send message (with loading indicator, abort control)
  async function sendMessage(){
    const text = userInput.value.trim();
    if (!text) return;
    if (!currentSessionId) { alert('Please create or select a chat first.'); return; }

    // Append user message to UI immediately
    appendMessage(text, 'user');

    // Clear input and show loader
    userInput.value = '';
    userInput.disabled = true;
    sendBtn.disabled = true;
    showLoadingIndicator();

    // Setup abort controller
    currentController = new AbortController();
    const signal = currentController.signal;

    const payload = new URLSearchParams();
    payload.set('chat_session_id', currentSessionId);
    payload.set('message', text);

    try {
      const resp = await fetch('chat_ajax.php', {
        method: 'POST',
        body: payload,
        signal
      });

      if (!resp.ok){
        const txt = await resp.text().catch(()=>`HTTP ${resp.status}`);
        throw new Error('HTTP error: ' + txt);
      }

      const json = await resp.json();

      hideLoadingIndicator();
      currentController = null;
      userInput.disabled = false;
      sendBtn.disabled = false;

      if (json.answer){
        appendMessage(json.answer, 'assistant');
        scrollToBottom();
      } else if (json.error){
        appendMessage('Error: ' + json.error, 'assistant');
      } else {
        appendMessage('No answer returned.', 'assistant');
      }
    } catch (err) {
      hideLoadingIndicator();
      currentController = null;
      userInput.disabled = false;
      sendBtn.disabled = false;

      if (err.name === 'AbortError'){
        appendMessage('*Cancelled.*', 'assistant');
      } else {
        console.error('sendMessage error', err);
        appendMessage('Request failed: ' + (err.message || 'unknown error'), 'assistant');
      }
      scrollToBottom();
    } finally {
      // ensure focus for quick follow-up
      userInput.focus();
    }
  }

  // New chat
  async function newChat(){
    try {
      const resp = await fetch('chat_ajax.php', {
        method:'POST',
        body:new URLSearchParams({ new_chat: '1' })
      });
      const j = await resp.json();
      if (j.chat_session_id) {
        currentSessionId = j.chat_session_id;
        messagesDiv.innerHTML = '';
        chatHeader.textContent = 'New Chat';
        loadSessions();
      }
    } catch (err) {
      console.error('newChat error', err);
    }
  }

  // Event wiring
  if (newChatBtn) newChatBtn.addEventListener('click', newChat);
  if (sendBtn) sendBtn.addEventListener('click', sendMessage);
  if (userInput) userInput.addEventListener('keypress', e => { if (e.key === 'Enter') sendMessage(); });
  if (toggleBtn) toggleBtn.addEventListener('click', ()=> {
    if (chatList.style.display === 'flex') { chatList.style.display = 'none'; }
    else { chatList.style.display = 'flex'; }
  });

  // Init
  loadSessions();

  // Expose for debugging from console (optional)
  window.SPWChat = { loadSessions, loadChat, sendMessage, appendMessage };
})();
